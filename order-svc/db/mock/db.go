// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -source=db.go -destination=./mock/db.go -typed
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	model "github.com/chpter/order-svc/db/model"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderQueries is a mock of OrderQueries interface.
type MockOrderQueries struct {
	ctrl     *gomock.Controller
	recorder *MockOrderQueriesMockRecorder
	isgomock struct{}
}

// MockOrderQueriesMockRecorder is the mock recorder for MockOrderQueries.
type MockOrderQueriesMockRecorder struct {
	mock *MockOrderQueries
}

// NewMockOrderQueries creates a new mock instance.
func NewMockOrderQueries(ctrl *gomock.Controller) *MockOrderQueries {
	mock := &MockOrderQueries{ctrl: ctrl}
	mock.recorder = &MockOrderQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderQueries) EXPECT() *MockOrderQueriesMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderQueries) CreateOrder(ctx context.Context, payload *model.CreateOrderRequest) (*model.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, payload)
	ret0, _ := ret[0].(*model.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderQueriesMockRecorder) CreateOrder(ctx, payload any) *MockOrderQueriesCreateOrderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderQueries)(nil).CreateOrder), ctx, payload)
	return &MockOrderQueriesCreateOrderCall{Call: call}
}

// MockOrderQueriesCreateOrderCall wrap *gomock.Call
type MockOrderQueriesCreateOrderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderQueriesCreateOrderCall) Return(arg0 *model.CreateOrderResponse, arg1 error) *MockOrderQueriesCreateOrderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderQueriesCreateOrderCall) Do(f func(context.Context, *model.CreateOrderRequest) (*model.CreateOrderResponse, error)) *MockOrderQueriesCreateOrderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderQueriesCreateOrderCall) DoAndReturn(f func(context.Context, *model.CreateOrderRequest) (*model.CreateOrderResponse, error)) *MockOrderQueriesCreateOrderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrderByID mocks base method.
func (m *MockOrderQueries) GetOrderByID(ctx context.Context, id int64) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderQueriesMockRecorder) GetOrderByID(ctx, id any) *MockOrderQueriesGetOrderByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderQueries)(nil).GetOrderByID), ctx, id)
	return &MockOrderQueriesGetOrderByIDCall{Call: call}
}

// MockOrderQueriesGetOrderByIDCall wrap *gomock.Call
type MockOrderQueriesGetOrderByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderQueriesGetOrderByIDCall) Return(arg0 *model.Order, arg1 error) *MockOrderQueriesGetOrderByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderQueriesGetOrderByIDCall) Do(f func(context.Context, int64) (*model.Order, error)) *MockOrderQueriesGetOrderByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderQueriesGetOrderByIDCall) DoAndReturn(f func(context.Context, int64) (*model.Order, error)) *MockOrderQueriesGetOrderByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrders mocks base method.
func (m *MockOrderQueries) GetOrders(ctx context.Context, limit, offset int64) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderQueriesMockRecorder) GetOrders(ctx, limit, offset any) *MockOrderQueriesGetOrdersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderQueries)(nil).GetOrders), ctx, limit, offset)
	return &MockOrderQueriesGetOrdersCall{Call: call}
}

// MockOrderQueriesGetOrdersCall wrap *gomock.Call
type MockOrderQueriesGetOrdersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderQueriesGetOrdersCall) Return(arg0 []*model.Order, arg1 error) *MockOrderQueriesGetOrdersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderQueriesGetOrdersCall) Do(f func(context.Context, int64, int64) ([]*model.Order, error)) *MockOrderQueriesGetOrdersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderQueriesGetOrdersCall) DoAndReturn(f func(context.Context, int64, int64) ([]*model.Order, error)) *MockOrderQueriesGetOrdersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOrdersByUserID mocks base method.
func (m *MockOrderQueries) GetOrdersByUserID(ctx context.Context, userID int64) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockOrderQueriesMockRecorder) GetOrdersByUserID(ctx, userID any) *MockOrderQueriesGetOrdersByUserIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockOrderQueries)(nil).GetOrdersByUserID), ctx, userID)
	return &MockOrderQueriesGetOrdersByUserIDCall{Call: call}
}

// MockOrderQueriesGetOrdersByUserIDCall wrap *gomock.Call
type MockOrderQueriesGetOrdersByUserIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderQueriesGetOrdersByUserIDCall) Return(arg0 []*model.Order, arg1 error) *MockOrderQueriesGetOrdersByUserIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderQueriesGetOrdersByUserIDCall) Do(f func(context.Context, int64) ([]*model.Order, error)) *MockOrderQueriesGetOrdersByUserIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderQueriesGetOrdersByUserIDCall) DoAndReturn(f func(context.Context, int64) ([]*model.Order, error)) *MockOrderQueriesGetOrdersByUserIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
