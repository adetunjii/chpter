// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -source=db.go -destination=./mock/db.go -typed
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	model "github.com/chpter/user-svc/db/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserQueries is a mock of UserQueries interface.
type MockUserQueries struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueriesMockRecorder
	isgomock struct{}
}

// MockUserQueriesMockRecorder is the mock recorder for MockUserQueries.
type MockUserQueriesMockRecorder struct {
	mock *MockUserQueries
}

// NewMockUserQueries creates a new mock instance.
func NewMockUserQueries(ctrl *gomock.Controller) *MockUserQueries {
	mock := &MockUserQueries{ctrl: ctrl}
	mock.recorder = &MockUserQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserQueries) EXPECT() *MockUserQueriesMockRecorder {
	return m.recorder
}

// GetUserById mocks base method.
func (m *MockUserQueries) GetUserById(ctx context.Context, id int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserQueriesMockRecorder) GetUserById(ctx, id any) *MockUserQueriesGetUserByIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserQueries)(nil).GetUserById), ctx, id)
	return &MockUserQueriesGetUserByIdCall{Call: call}
}

// MockUserQueriesGetUserByIdCall wrap *gomock.Call
type MockUserQueriesGetUserByIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserQueriesGetUserByIdCall) Return(arg0 *model.User, arg1 error) *MockUserQueriesGetUserByIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserQueriesGetUserByIdCall) Do(f func(context.Context, int64) (*model.User, error)) *MockUserQueriesGetUserByIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserQueriesGetUserByIdCall) DoAndReturn(f func(context.Context, int64) (*model.User, error)) *MockUserQueriesGetUserByIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUsers mocks base method.
func (m *MockUserQueries) GetUsers(ctx context.Context, limit, offset int64) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, limit, offset)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserQueriesMockRecorder) GetUsers(ctx, limit, offset any) *MockUserQueriesGetUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserQueries)(nil).GetUsers), ctx, limit, offset)
	return &MockUserQueriesGetUsersCall{Call: call}
}

// MockUserQueriesGetUsersCall wrap *gomock.Call
type MockUserQueriesGetUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserQueriesGetUsersCall) Return(arg0 []*model.User, arg1 error) *MockUserQueriesGetUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserQueriesGetUsersCall) Do(f func(context.Context, int64, int64) ([]*model.User, error)) *MockUserQueriesGetUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserQueriesGetUsersCall) DoAndReturn(f func(context.Context, int64, int64) ([]*model.User, error)) *MockUserQueriesGetUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
